AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >

  SAM Template for Lambda

Parameters:
  AppIdentity:
    Type: String
    Description: unique word to identity this application
    Default: ucp
  Stage:
    Type: String
    Description: Deployment stage
  CognitoUserPoolName:
    Type: String
    Description: CognitoUserPool Name
    Default: ucp-sam-cognito-demo
  CognitoUserPoolClientName:
    Type: String
    Description: CognitoUser Pool Client Name
    Default: ucp-sam-cognito-client-demo
  FileBucketName:
    Type: String
    Description: file bucket Name
    Default: ucp-sam-s3-demo-sg
  GithubRepo:
    Description: Gitub Repository name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /services/github/repo
  GithubToken:
    Description: Github OAuth Token with full permissions on admin:repo_hook and repo
    Type: AWS::SSM::Parameter::Value<String>
    NoEcho: true
    Default: /services/github/token
  GithubUser:
    Description: Github user where the repository lives
    Type: AWS::SSM::Parameter::Value<String>
    Default: /services/github/user
  GitBranchName:
    Description: Repo Branch Name
    Type: String
    Default: master

Globals:
  Function:
    Timeout: 800
    Runtime: python3.8
    
Resources:
# create subnet sg vpc secretsmanager sagemaker endpoint sns
# functuins section
  # MyLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: main/
  #     Handler: app.lambda_handler
  #     Policies:
  #       - AWSLambdaExecute
  #     VpcConfig:
  #       SecurityGroupIds: 
  #         - !Ref MySecurityGroup
  #       SubnetIds: 
  #         - !Ref MySubnet
  #     Events:
  #       TestEvent:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /
  #           Method: Get

  # MyCaseLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: main/
  #     Handler: app.lambda_handler
  #     Policies:
  #       - arn:aws:iam::aws:policy/AWSLambdaExecute
  #     VpcConfig:
  #       SecurityGroupIds: 
  #         - !Ref MySecurityGroup
  #       SubnetIds: 
  #         - !Ref MySubnet
  #     Events:
  #       CreateCasesEvent:
  #         Type: S3
  #         Properties:
  #           Bucket: !Ref MyFileBucket
  #           Events: s3:ObjectCreated:*


  gwCasemain:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: main/gwCase-main/
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds: 
          - !Ref MySubnet
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /cases
            Method: ANY
            RestApiId: !Ref MyApi
        Api2:
          Type: Api
          Properties:
            Path: /cases
            Method: OPTIONS
            RestApiId: !Ref MyApi
      # Layers:
      #   - 'arn:aws:lambda:us-west-2:608494368293:layer:Jose:1'
      #   - 'arn:aws:lambda:us-west-2:608494368293:layer:postgresqlClient-master:3'
            
#vpc
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName

#subnet 
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24 
      # AvailabilityZone: us-west-1b
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName

  SecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24 
      Tags:
      - Key: Stack
        Value: Second subnet for UCP project

#SG
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group
      VpcId:
        Ref: MyVPC
      Tags: 
      - Key: Stack
        Value: !Ref AWS::StackName
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic to lambda
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic from lambda
    
# #API section
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
      
#Congnito User Pool        
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', [!Ref AppIdentity, 'UserPool', !Ref Stage]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Join ['-', [!Ref AppIdentity, 'UserPoolClientName', !Ref Stage]]
      GenerateSecret: false
#S3 
  MyFileBucket:
    Type: "AWS::S3::Bucket"
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [!Ref AppIdentity, 'filebucket', !Ref Stage]]
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     -
      #       Function: !Ref MyLambdaFunction
      #       Event: "s3:ObjectCreated:*"
      #       Filter:
      #         S3Key:
      #           Rules:
      #             -
      #               Name: suffix
      #               Value: pdf
#Sagemaker
  # Endpoint:
  #   Type: "AWS::SageMaker::Endpoint"
  #   Properties:
  #     EndpointConfigName:
  #       !GetAtt EndpointConfig.EndpointConfigName
  # EndpointConfig:
  #   Type: "AWS::SageMaker::EndpointConfig"
  #   Properties:
  #     ProductionVariants:
  #       - InitialInstanceCount: 1
  #         InitialVariantWeight: 1.0
  #         InstanceType: ml.t2.large
  #         ModelName: !GetAtt Model.ModelName
  #         VariantName: !GetAtt Model.ModelName
  # Model:
  #   Type: "AWS::SageMaker::Model"
  #   Properties:
  #     PrimaryContainer:
  #       Image: 608494368293.dkr.ecr.ap-southeast-1.amazonaws.com/mosaic-meddra-coding:latest
  #     ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  # ExecutionRole: 
  #   Type: "AWS::IAM::Role"
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Principal: 
  #             Service: 
  #               - "sagemaker.amazonaws.com"
  #           Action: 
  #             - "sts:AssumeRole"
  #     Path: "/"
  #     Policies: 
  #       - 
  #         PolicyName: "root"
  #         PolicyDocument: 
  #           Version: "2012-10-17"
  #           Statement: 
  #             - 
  #               Effect: "Allow"
  #               Action: "*"
  #               Resource: "*"

#amplify section
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: amplify-sam-demo-app
      Repository: !Ref GithubRepo
      OauthToken: !Ref GithubToken
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables:
        - Name: ENDPOINT
          Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !Ref GitBranchName
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true

  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "amplify:*"
                Resource: "*"


Outputs:
  OrderApi:
    Description: "API Gateway endpoint URL for Prod stage for Order function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello/"
  AmplifyAppID:
    Value: !Ref AmplifyApp
  # EndpointId:
  #   Value: !Ref Endpoint
  # EndpointName:
  #   Value: !GetAtt Endpoint.EndpointName

  # WebsiteCloudfront:
  #   Type: AWS::CloudFront::Distribution
  #   DependsOn:
  #     - WebsiteBucket
  #   Properties:
  #     DistributionConfig:
  #       Comment: Cloudfront Distribution pointing to S3 bucket
  #       Origins:
  #         - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
  #           Id: S3Origin
  #           CustomOriginConfig:
  #             HTTPPort: '80'
  #             HTTPSPort: '443'
  #             OriginProtocolPolicy: http-only
  #       Enabled: true
  #       HttpVersion: 'http2'
  #       DefaultRootObject: index.html
  #       Aliases:
  #         - !Ref 'DomainName'
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         Compress: true
  #         TargetOriginId: S3Origin
  #         ForwardedValues:
  #           QueryString: true
  #           Cookies:
  #             Forward: none
  #         ViewerProtocolPolicy: redirect-to-https
  #       PriceClass: PriceClass_All
  #       ViewerCertificate:
  #         AcmCertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/1bf2c345--6789-0b1b-a123-a4bb5a6fa44c
  #         SslSupportMethod: sni-only
  # WebsiteDNSName:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !Join ['', [!Ref 'DomainName', .]]
  #     RecordSets:
  #       - Name: !Ref 'DomainName'
  #         Type: A
  #         AliasTarget:
  #           HostedZoneId: Z2FDTNDATAQYW2
  #           DNSName: !GetAtt [WebsiteCloudfront, DomainName]