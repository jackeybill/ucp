AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >

  SAM Template for Lambda

Parameters:
  AppIdentity:
    Type: String
    Description: unique word to identity this application
    Default: ucp
  Stage:
    Type: String
    Description: Deployment stage
  CognitoUserPoolName:
    Type: String
    Description: CognitoUserPool Name
    Default: ucp-sam-cognito-demo
  CognitoUserPoolClientName:
    Type: String
    Description: CognitoUser Pool Client Name
    Default: ucp-sam-cognito-client-demo
  FileBucketName:
    Type: String
    Description: file bucket Name
    Default: ucp-sam-s3-demo-sg
  GitBranchName:
    Description: Repo Branch Name
    Type: String
    Default: master
  VPCId:
    Description: VPC ID for lambda
    Type: String
    Default: ""
  SageMakerImage:
    Description: SagerMaker ECR Image ARN
    Type: String
    Default: 608494368293.dkr.ecr.us-east-2.amazonaws.com/mosaic-meddra-coding
  DirsToCreate:
    Description: "list of directories to create."
    Type: String
    Default: ucp-filebucket-dev/RawDocuments
  FileBucket:
    Description: Bucket for files
    Type: String
    Default: ""

Conditions:
  IsVPCNotCreated: !Not [!Equals [!Ref "VPCId", ""]]
  IsFileBucketNotCreated: !Not [!Equals [!Ref "FileBucket", ""]]

Globals:
  Function:
    Timeout: 60
    Runtime: python3.8

Resources:
## _   _      _                      _        
# | \ | |    | |                    | |       
# |  \| | ___| |___      _____  _ __| | _____ 
# | . ` |/ _ \ __\ \ /\ / / _ \| '__| |/ / __|
# | |\  |  __/ |_ \ V  V / (_) | |  |   <\__ \
# |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\___/

  MyVPC: 
    Type: AWS::EC2::VPC
    Condition: IsVPCNotEmpty
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName

#    _____ _   _  _____ 
#   / ____| \ | |/ ____|
#  | (___ |  \| | (___  
#   \___ \| . ` |\___ \ 
#   ____) | |\  |____) |
#  |_____/|_| \_|_____/ 

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt MySQS.Arn
          Protocol: "sqs"

  ExtractPdfSNsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ['-', ['AmazonTextractExtractPDF', !Ref AppIdentity, !Ref Stage]]
      TopicName: !Join ['-', ['AmazonTextractExtractPDF', !Ref AppIdentity, !Ref Stage]]
      Subscription:
        - Endpoint: !GetAtt MySQS.Arn
          Protocol: "sqs"
          
  MySQS:
    Type: AWS::SQS::Queue
    Properties:
      MaximumMessageSize: 262144
      VisibilityTimeout: 800

  AllowLambdas2SQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues: [!Ref 'MySQS']
        PolicyDocument:
          Version: '2008-10-17'
          Id: PublicationPolicy4SendMsg
          Statement:
          - Sid: Allow-Lambda-SendMessage
            Effect: Allow
            Principal: "*"
            Action: "SQS:*"
            Resource: "*"

#  _                     _         _
# | |                   | |       | |      
# | |     __ _ _ __ ___ | |__   __| | __ _ 
# | |    / _` | '_ ` _ \| '_ \ / _` |/ _` |
# | |___| (_| | | | | | | |_) | (_| | (_| |
# |______\__,_|_| |_| |_|_.__/ \__,_|\__,_|                                          
                                        
  gwCasemain:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: main/gwCase-main/
      Role: !GetAtt MyLambdaExecuteRole.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /cases
            Method: ANY
            RestApiId: !Ref MyApi
        Api2:
          Type: Api
          Properties:
            Path: /cases
            Method: OPTIONS
            RestApiId: !Ref MyApi

  isoservicedevupload:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: upload.lambda_handler
      CodeUri: main/iso-service-dev-upload/
      Description: Upload file from api gateway to S3
      Role: !GetAtt MyLambdaExecuteRole.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /upload
            Method: get
      Environment:
        Variables:
          STAGE: !Ref Stage
          SERVICE: !Ref AppIdentity
          BUCKET_NAME: !Ref MyFileBucket
         

  deandevsearchkendra:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: main/dean-dev-search-kendra/
      Role: !GetAtt MyLambdaExecuteRole.Arn
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref MyApi
        # Api2:
        #   Type: Api
        #   Properties:
        #     Path: /
        #     Method: POST
        #     RestApiId: !Ref MyApi

  extractPDF:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: extractPDF.lambda_handler
      CodeUri: main/iso-service-dev-extractPDF/
      Role: !GetAtt MyLambdaExecuteRole.Arn
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket: !Ref MyFileBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          STAGE: !Ref Stage
          SERVICE: !Ref AppIdentity
          NOTIFICATION_ARN: !Ref MySNSTopic
          ROLE_ARN: !GetAtt MyLambdaExecuteRole.Arn
          TEXTRACT_NOTIFICATION_ARN: !Ref ExtractPdfSNsTopic

  processPdfToTxt:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processPdfToTxt.lambda_handler
      CodeUri: main/iso-service-dev-processPdfToTxt/
      Description: 'Process PDF to txt, and save into S3'
      Role: !GetAtt MyLambdaExecuteRole.Arn
      Events:
        SQS1:
          Type: SQS
          Properties:
            Queue: !GetAtt MySQS.Arn
      Environment:
        Variables:
          STAGE: !Ref Stage
          SERVICE: !Ref AppIdentity
          NOTIFICATION_ARN: !Ref MySNSTopic
          ROLE_ARN: !GetAtt MyLambdaExecuteRole.Arn
          TEXTRACT_NOTIFICATION_ARN: !Ref ExtractPdfSNsTopic

  txtintosections:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: txtintosections.lambda_handler
      CodeUri: main/iso-service-dev-txtintosections/
      Description: This lambda function to extract sections from txt
      Role: !GetAtt MyLambdaExecuteRole.Arn

  isoservicedevawslabel:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: main/iso-service-dev-aws-label/
      Role: !GetAtt MyLambdaExecuteRole.Arn

#   _____       _           
#  |  __ \     | |          
#  | |__) |___ | | ___  ___ 
#  |  _  // _ \| |/ _ \/ __|
#  | | \ \ (_) | |  __/\__ \
#  |_|  \_\___/|_|\___||___/

  MyRootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref MyLambdaExecuteRole

  MyRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
      - !Ref MyLambdaExecuteRole

  MyLambdaExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - dynamodb.amazonaws.com
            - s3.amazonaws.com
            - lambda.amazonaws.com
            - textract.amazonaws.com
            - sns.amazonaws.com
            - rds.amazonaws.com
          Action:
          - sts:AssumeRole       
      Path: "/"
      
  SQSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sqs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sqsExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*
                Effect: Allow
              - Action: s3:*
                Resource:
                  - arn:aws:s3:::*
                Effect: Allow
              - Action:
                  - SNS:*
                Resource:
                  - arn:aws:sns:*
                Effect: Allow
              - Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:GetItem
                Resource:
                  - arn:aws:dynamodb:*
                Effect: Allow
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - arn:aws:sqs:*
                Effect: Allow

#            _____ _____ 
#      /\   |  __ \_   _|
#     /  \  | |__) || |  
#    / /\ \ |  ___/ | |  
#   / ____ \| |    _| |_ 
#  /_/    \_\_|   |_____|
                       
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
      
#    _____                  _ _        
#   / ____|                (_) |       
#  | |     ___   __ _ _ __  _| |_ ___  
#  | |    / _ \ / _` | '_ \| | __/ _ \ 
#  | |___| (_) | (_| | | | | | || (_) |
#   \_____\___/ \__, |_| |_|_|\__\___/ 
#                __/ |                 
#               |___/                  
     
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', [!Ref AppIdentity, 'UserPool', !Ref Stage]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Join ['-', [!Ref AppIdentity, 'UserPoolClientName', !Ref Stage]]
      GenerateSecret: false

#   _____                                   _____  ____  
#  |  __ \                                 |  __ \|  _ \ 
#  | |  | |_   _ _ __   __ _ _ __ ___   ___| |  | | |_) |
#  | |  | | | | | '_ \ / _` | '_ ` _ \ / _ \ |  | |  _ < 
#  | |__| | |_| | | | | (_| | | | | | |  __/ |__| | |_) |
#  |_____/ \__, |_| |_|\__,_|_| |_| |_|\___|_____/|____/ 
#           __/ |                                        
#          |___/                     
                    
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Join ['-', [!Ref AppIdentity, !Ref Stage, 'log']]
      AttributeDefinitions: 
        - AttributeName: file_name
          AttributeType: S
      KeySchema: 
        - AttributeName: file_name
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

#   ____             _        _   
#  |  _ \           | |      | |  
#  | |_) |_   _  ___| | _____| |_ 
#  |  _ <| | | |/ __| |/ / _ \ __|
#  | |_) | |_| | (__|   <  __/ |_ 
#  |____/ \__,_|\___|_|\_\___|\__|
                                
  MyFileBucket:
    Type: "AWS::S3::Bucket"
    # condition if parameter
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [!Ref AppIdentity, 'filebucket', !Ref Stage]]
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     -
      #       Function: !Ref MyLambdaFunction
      #       Event: "s3:ObjectCreated:*"
      #       Filter:
      #         S3Key:
      #           Rules:
      #             -
      #               Name: suffix
      #               Value: pdf
#    _____                                  _             
#   / ____|                                | |            
#  | (___   __ _  __ _  ___ _ __ ___   __ _| | _____ _ __ 
#   \___ \ / _` |/ _` |/ _ \ '_ ` _ \ / _` | |/ / _ \ '__|
#   ____) | (_| | (_| |  __/ | | | | | (_| |   <  __/ |   
#  |_____/ \__,_|\__, |\___|_| |_| |_|\__,_|_|\_\___|_|   
#                 __/ |                                   
#                |___/                                    

# Sagemaker
  # Endpoint:
  #   Type: "AWS::SageMaker::Endpoint"
  #   Properties:
  #     EndpointConfigName:
  #       !GetAtt EndpointConfig.EndpointConfigName
  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.t2.large
          ModelName: !GetAtt Model.ModelName
          VariantName: !GetAtt Model.ModelName
  Model:
    Type: "AWS::SageMaker::Model"
    Properties:
      PrimaryContainer:
        Image: !Ref SageMakerImage
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  ExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"
Outputs:
  OrderApi:
    Description: "API Gateway endpoint URL for Prod stage for Order function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello/"
  Bucket:
    Description : "The name of the created bucket"
    Value: !Ref MyFileBucket
