AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >

  SAM Template for Lambda

Parameters:
  AppIdentity:
    Type: String
    Description: unique word to identity this application
    Default: ucp
  Stage:
    Type: String
    Description: Deployment stage
  CognitoUserPoolName:
    Type: String
    Description: CognitoUserPool Name
    Default: ucp-sam-cognito-demo
  CognitoUserPoolClientName:
    Type: String
    Description: CognitoUser Pool Client Name
    Default: ucp-sam-cognito-client-demo
  FileBucketName:
    Type: String
    Description: file bucket Name
    Default: ucp-sam-s3-demo-sg
  GithubRepo:
    Description: Gitub Repository name
    Type: AWS::SSM::Parameter::Value<String>
    Default: /services/github/repo
  GithubToken:
    Description: Github OAuth Token with full permissions on admin:repo_hook and repo
    Type: AWS::SSM::Parameter::Value<String>
    NoEcho: true
    Default: /services/github/token
  GithubUser:
    Description: Github user where the repository lives
    Type: AWS::SSM::Parameter::Value<String>
    Default: /services/github/user
  GitBranchName:
    Description: Repo Branch Name
    Type: String
    Default: master
  SageMakerImage:
    Description: SagerMaker ECR Image ARN
    Type: String
    Default: 608494368293.dkr.ecr.ap-southeast-1.amazonaws.com/mosaic-meddra-coding:latest

Globals:
  Function:
    Timeout: 800
    Runtime: python3.8
  
  
    
Resources:
## --------------   Lambda   -------------------- ##

# create subnet sg vpc secretsmanager sagemaker endpoint sns
# functuins section
  # MyLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: main/
  #     Handler: app.lambda_handler
  #     Policies:
  #       - AWSLambdaExecute
  #     VpcConfig:
  #       SecurityGroupIds: 
  #         - !Ref MySecurityGroup
  #       SubnetIds: 
  #         - !Ref MySubnet
  #     Events:
  #       TestEvent:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /
  #           Method: Get

  # MyCaseLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: main/
  #     Handler: app.lambda_handler
  #     Policies:
  #       - arn:aws:iam::aws:policy/AWSLambdaExecute
  #     VpcConfig:
  #       SecurityGroupIds: 
  #         - !Ref MySecurityGroup
  #       SubnetIds: 
  #         - !Ref MySubnet
  #     Events:
  #       CreateCasesEvent:
  #         Type: S3
  #         Properties:
  #           Bucket: !Ref MyFileBucket
  #           Events: s3:ObjectCreated:*
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "MySQS"
              - "Arn"
          Protocol: "sqs"

  ExtractPdfSNsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            Fn::GetAtt:
              - "MySQS"
              - "Arn"
          Protocol: "sqs"
          
  MySQS:
    Type: AWS::SQS::Queue
    Properties:
      MaximumMessageSize: 262144
      VisibilityTimeout: 800

  gwCasemain:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: main/gwCase-main/
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds: 
          - !Ref MySubnet
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /cases
            Method: ANY
            RestApiId: !Ref MyApi
        Api2:
          Type: Api
          Properties:
            Path: /cases
            Method: OPTIONS
            RestApiId: !Ref MyApi
      # Layers:
        # - 'arn:aws:lambda:us-west-2:608494368293:layer:Jose:1'
        # - 'arn:aws:lambda:us-west-2:608494368293:layer:postgresqlClient-master:3'

  deandevsearchkendra:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: main/dean-dev-search-kendra/
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds:
          - !Ref MySubnet
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref MyApi
        Api2:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref MyApi

  isoservicedevextractPDF:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: extractPDF.lambda_handler
      CodeUri: main/iso-service-dev-extractPDF/
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds: 
          - !Ref MySubnet
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket: !Ref MyFileBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          STAGE: dev
          SERVICE: iso-service
          NOTIFICATION_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${MySNSTopic}"
          ROLE_ARN: !Ref SQSRole
          TEXTRACT_NOTIFICATION_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ExtractPdfSNsTopic}"

  isoservicedevprocessPdfToTxt:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processPdfToTxt.lambda_handler
      CodeUri: main/iso-service-dev-processPdfToTxt/
      Description: 'Process PDF to txt, and save into S3'
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds:
          - !Ref MySubnet
      Events:
        SQS1:
          Type: SQS
          Properties:
            Queue: !GetAtt MySQS.Arn
      Environment:
        Variables:
          STAGE: dev
          SERVICE: iso-service
          NOTIFICATION_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${MySNSTopic}"
          ROLE_ARN: !Ref SQSRole
          TEXTRACT_NOTIFICATION_ARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ExtractPdfSNsTopic}"


  isoservicedevtxtintosections:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: txtintosections.lambda_handler
      CodeUri: main/iso-service-dev-txtintosections/
      Description: This lambda function to extract sections from txt
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds: 
          - !Ref MySubnet

  isoservicedevawslabel:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: main/iso-service-dev-aws-label/
      Policies:
        - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        SubnetIds: 
          - !Ref MySubnet

## --------------   lambda role   -------------------- ##
  MyRootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref MyLambdaExecuteRole
  MyRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
      - !Ref MyLambdaExecuteRole
  MyLambdaExecuteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - dynamodb.amazonaws.com
            - s3.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

## --------------   API   -------------------- ##
# #API section
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
      
## --------------   Networks   -------------------- ##
#vpc
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName

#vpc endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action:
          - "*"
          Resource:
          - "*"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref MyVPC
  
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action:
          - "*"
          Resource:
          - "*"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcId: !Ref MyVPC

#subnet 
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24 
      # AvailabilityZone: us-west-1b
      Tags:
      - Key: Stack
        Value: !Ref AWS::StackName

  SecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24 
      Tags:
      - Key: Stack
        Value: Second subnet for UCP project

#SG
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group
      VpcId:
        Ref: MyVPC
      Tags: 
      - Key: Stack
        Value: !Ref AWS::StackName
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic to lambda
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic from lambda

## --------------   Cognito   -------------------- ##
#Congnito User Pool        
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', [!Ref AppIdentity, 'UserPool', !Ref Stage]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Join ['-', [!Ref AppIdentity, 'UserPoolClientName', !Ref Stage]]
      GenerateSecret: false

## --------------   DynameDB   -------------------- ##     
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Join ['-', ['iso-service', !Ref Stage, 'log']]
      AttributeDefinitions: 
        # - AttributeName: file_name
        #   AttributeType: S
        # - AttributeName: create_time
        #   AttributeType: S
        # - AttributeName: source_bucket
        #   AttributeType: S
        # - AttributeName: successful
        #   AttributeType: S
        # - AttributeName: target_bucket
        #   AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      
## --------------   S3   -------------------- ##     
#S3 
  MyFileBucket:
    Type: "AWS::S3::Bucket"
    # DeletionPolicy: Retain
    Properties:
      BucketName: !Join ['-', [!Ref AppIdentity, 'filebucket', !Ref Stage]]
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     -
      #       Function: !Ref MyLambdaFunction
      #       Event: "s3:ObjectCreated:*"
      #       Filter:
      #         S3Key:
      #           Rules:
      #             -
      #               Name: suffix
      #               Value: pdf


  # SQSQueue1:
  #   Type: AWS::SQS::Queue
  #   Properties: {}


## --------------   Sagemaker   -------------------- ##
#Sagemaker
  # Endpoint:
  #   Type: "AWS::SageMaker::Endpoint"
  #   Properties:
  #     EndpointConfigName:
  #       !GetAtt EndpointConfig.EndpointConfigName
  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      ProductionVariants:
        - InitialInstanceCount: 1
          InitialVariantWeight: 1.0
          InstanceType: ml.t2.large
          ModelName: !GetAtt Model.ModelName
          VariantName: !GetAtt Model.ModelName
  Model:
    Type: "AWS::SageMaker::Model"
    Properties:
      PrimaryContainer:
        Image: !Ref SageMakerImage
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn

  ExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"

## --------------   Amplify   -------------------- ##
#amplify section
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Join ['-', [!Ref AppIdentity, 'amplify', !Ref Stage]]
      Repository: !Sub "https://github.com/${GithubUser}/${GithubRepo}.git"
      AccessToken: !Ref GithubToken
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables:
        - Name: ENDPOINT
          Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: !Ref GitBranchName
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true


## --------------   IAM Role   -------------------- ##
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "amplify:*"
                Resource: "*"

  SQSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sqs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: sqsExecution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*
                Effect: Allow
              - Action: s3:*
                Resource:
                  - arn:aws:s3:::*
                Effect: Allow
              - Action:
                  - SNS:*
                Resource:
                  - arn:aws:sns:*
                Effect: Allow
              - Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                  - dynamodb:GetItem
                Resource:
                  - arn:aws:dynamodb:*
                Effect: Allow
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - arn:aws:sqs:*
                Effect: Allow



Outputs:
  OrderApi:
    Description: "API Gateway endpoint URL for Prod stage for Order function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello/"
  # AmplifyAppID:
  #   Value: !Ref AmplifyApp
  # EndpointId:
  #   Value: !Ref Endpoint
  # EndpointName:
  #   Value: !GetAtt Endpoint.EndpointName

  # WebsiteCloudfront:
  #   Type: AWS::CloudFront::Distribution
  #   DependsOn:
  #     - WebsiteBucket
  #   Properties:
  #     DistributionConfig:
  #       Comment: Cloudfront Distribution pointing to S3 bucket
  #       Origins:
  #         - DomainName: !Select [2, !Split ["/", !GetAtt WebsiteBucket.WebsiteURL]]
  #           Id: S3Origin
  #           CustomOriginConfig:
  #             HTTPPort: '80'
  #             HTTPSPort: '443'
  #             OriginProtocolPolicy: http-only
  #       Enabled: true
  #       HttpVersion: 'http2'
  #       DefaultRootObject: index.html
  #       Aliases:
  #         - !Ref 'DomainName'
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         Compress: true
  #         TargetOriginId: S3Origin
  #         ForwardedValues:
  #           QueryString: true
  #           Cookies:
  #             Forward: none
  #         ViewerProtocolPolicy: redirect-to-https
  #       PriceClass: PriceClass_All
  #       ViewerCertificate:
  #         AcmCertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/1bf2c345--6789-0b1b-a123-a4bb5a6fa44c
  #         SslSupportMethod: sni-only
  # WebsiteDNSName:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !Join ['', [!Ref 'DomainName', .]]
  #     RecordSets:
  #       - Name: !Ref 'DomainName'
  #         Type: A
  #         AliasTarget:
  #           HostedZoneId: Z2FDTNDATAQYW2
  #           DNSName: !GetAtt [WebsiteCloudfront, DomainName]