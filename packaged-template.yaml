AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "ucp-app SAM Template for ucp-app\n"
Parameters:
  AppIdentity:
    Type: String
    Description: unique word to identity this application
    Default: ucp
  Stage:
    Type: String
    Description: Deployment stage
    Default: Dev
  CognitoUserPoolName:
    Type: String
    Description: CognitoUserPool Name
    Default: ucp-sam-cognito-demo
  CognitoUserPoolClientName:
    Type: String
    Description: CognitoUser Pool Client Name
    Default: ucp-sam-cognito-client-demo
  FileBucketName:
    Type: String
    Description: file bucket Name
    Default: ucp-sam-s3-demo
  WebBucketName:
    Type: String
    Description: Web bucket Name
    Default: ucp-web-s3-demo
Globals:
  Function:
    Timeout: 800
    Runtime: python3.8
Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-lepoic0s00k5/ae9068db5edfa86f10e3e37b3b2e6bae
      Handler: app.lambda_handler
      Policies:
      - AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds:
        - Ref: MySecurityGroup
        SubnetIds:
        - Ref: MySubnet
      Events:
        TestEvent:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyApi
            Path: /
            Method: Get
  MyCaseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-lepoic0s00k5/ae9068db5edfa86f10e3e37b3b2e6bae
      Handler: app.lambda_handler
      Policies:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      VpcConfig:
        SecurityGroupIds:
        - Ref: MySecurityGroup
        SubnetIds:
        - Ref: MySubnet
      Events:
        CreateCasesEvent:
          Type: S3
          Properties:
            Bucket:
              Ref: MyFileBucket
            Events: s3:ObjectCreated:*
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: false
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Vpc for UCP project
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Name
        Value: Subnet for UCP project
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for UCP project
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic to lambda
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: allow all the traffic from lambda
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: Stage
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - MyCognitoUserPool
              - Arn
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: MyCognitoUserPool
      ClientName:
        Ref: CognitoUserPoolClientName
      GenerateSecret: false
  MyFileBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: FileBucketName
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: WebBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: WebBucket
              - /*
Outputs:
  OrderApi:
    Description: API Gateway endpoint URL for Prod stage for Order function
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/hello/
  S3WebBucket:
    Description: Arn for S3 web host
    Value:
      Ref: WebBucket
